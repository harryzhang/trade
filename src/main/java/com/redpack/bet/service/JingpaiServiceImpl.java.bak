/*
 * Powered By  huangzl QQ: 272950754
 * Web Site:  
 * Since 2008 - 2016
 */

package com.redpack.service.bet;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.redpack.common.account.IBizUserAccountService;
import com.redpack.common.account.model.BizUserAccountDo;
import com.redpack.common.account.model.UserAccountDetailDo;
import com.redpack.common.account.model.UserAccountIncomeDo;
import com.redpack.common.account.model.UserDo;
import com.redpack.common.base.result.IResult;
import com.redpack.common.base.result.ResultSupport;
import com.redpack.common.bet.IJingpaiService;
import com.redpack.common.bet.model.JingpaiDo;
import com.redpack.common.bet.model.UserJingpaiDo;
import com.redpack.common.constant.AccountMsg;
import com.redpack.common.constant.WebConstants;
import com.redpack.common.member.model.KuangjiUserAccountDo;
import com.redpack.dao.account.IUserAccountDetailDao;
import com.redpack.dao.account.IUserAccountIncomeDao;
import com.redpack.dao.account.IUserDao;
import com.redpack.dao.bet.IJingpaiDao;
import com.redpack.dao.bet.IUserJingpaiDao;
import com.redpack.dao.member.IMemberDao;

/**
 * @author  huangzl QQ: 272950754
 * @version 1.0
 * @since 1.0
 */


@Service("jingpaiService")
public class JingpaiServiceImpl implements IJingpaiService {

	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Autowired
    private IJingpaiDao  jingpaiDao;
	
	@Autowired
    private IUserAccountIncomeDao  userAccountIncomeDao;
	
	@Autowired
	private IUserAccountDetailDao  userAccountDetailDao;
	
	@Autowired
	private IMemberDao memberDao;
	
	
	@Autowired
	private IUserDao userDao;
	
	@Autowired
    private IUserJingpaiDao  userJingpaiDao;
	
	@Autowired
	private IBizUserAccountService bizUserAccountService;
	
	/**
	 * 根据ID 查询
	 * @parameter id
	 */
	@Override
	public JingpaiDo getById(int id){
	  return jingpaiDao.getById(id);
	}
	
	/**
	 *根据条件查询列表
	 */
	@Override
	public List<JingpaiDo> selectJingpai(Map<String,Object> parameterMap){
		return jingpaiDao.selectJingpai(parameterMap);
	}
	
	/**
	 * 更新
	 */
	@Override
	@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED)
	public IResult<?> updateJingpaiById(JingpaiDo newJingpaiDo){
		logger.debug("updateJingpai(JingpaiDo: "+newJingpaiDo);
		int i =jingpaiDao.updateJingpaiById(newJingpaiDo);
		if(i<1){
			return ResultSupport.buildResult(1, newJingpaiDo+"更新失败");
		}
		IResult<Integer> result = ResultSupport.buildResult(0);
		result.setModel(Integer.valueOf(i));
		return result;
	}
	
	/**
	 * 新增
	 */
	@Override
	@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED)
	public IResult<?> addJingpai(JingpaiDo newJingpaiDo){
		logger.debug("addJingpai: "+newJingpaiDo);
		int i =jingpaiDao.addJingpai(newJingpaiDo);
		if(i<1){
			return ResultSupport.buildResult(1, newJingpaiDo+"新增失败");
		}
		IResult<Integer> result = ResultSupport.buildResult(0);
		result.setModel(Integer.valueOf(i));
		return result;
	}
	
	/**
	 * 删除
	 */
	@Override
	@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED)
	public IResult<?> deleteById(int id){
		logger.debug("deleteByIdJingpai:"+id);
		int i =jingpaiDao.deleteById(id);
		if(i<1){
			return ResultSupport.buildResult(1, id+"删除失败");
		}
		IResult<Integer> result = ResultSupport.buildResult(0);
		result.setModel(Integer.valueOf(i));
		return result;
	} 

	@Override
	public List<Map<String, Object>> selectGoodsJingpai(Map param) {
		// TODO Auto-generated method stub
		return jingpaiDao.selectGoodsJingpai(param);
	}

	//同步竞拍
	@Override
	@Transactional
	public synchronized BigDecimal userJingpai(JingpaiDo jpDo, long userId) {
		// TODO Auto-generated method stub
		JingpaiDo jpNowDo = getById(jpDo.getId());
		BigDecimal lastPrice = jpNowDo.getLastPrice();
		// 1:减少前台帐户金额
		// 增加用户证券
		BizUserAccountDo bizUserAccountDo = new BizUserAccountDo();
		bizUserAccountDo.setAmount(lastPrice.negate());
		bizUserAccountDo.setUserId(userId);
		bizUserAccountDo.setAccountType(WebConstants.RMB_ACCOUNT);
		bizUserAccountService.updateUserAmountById(bizUserAccountDo, AccountMsg.type_12);


		UserDo userDo =userDao.getById(userId);
		//更新竞拍信息
		jpNowDo.setLastPrice(lastPrice.add(new BigDecimal("0.01")));
		jpNowDo.setUserTime(new Date());
		jpNowDo.setLastUser(userDo.getName());
		jpNowDo.setUserId((int)userId);
		updateJingpaiById(jpNowDo);
		
		//插入用户竞拍信息
		UserJingpaiDo ujpDo = new UserJingpaiDo();
		ujpDo.setJingpaiPrice(lastPrice);
		ujpDo.setJingpaiTime(new Date());
		ujpDo.setUserId((int)userId);
		ujpDo.setJingpaiId(jpDo.getId());
		userJingpaiDao.addUserJingpai(ujpDo);
		
		return lastPrice;
	}

	@Override
	public void betSuccess() {
		Map<String,Object> sjpMap = new HashMap<String,Object>();
		sjpMap.put("status", 1);
		List<JingpaiDo> jingPainList = jingpaiDao.selectJingpai(sjpMap);
		for (JingpaiDo jpDo : jingPainList) {
			//Date jpTime = jpDo.getUserTime();
			//Date now = new Date();
			
			BigDecimal lastPrice = jpDo.getLastPrice();
			BigDecimal endPrice = jpDo.getEndPrice();
			//如果大于20分钟还没有人竞争 自动拍
			//long dateDiff = now.getTime() - jpTime.getTime();
			//long min = dateDiff/1000/1000/60;
			
			int userId = jpDo.getUserId();
			UserDo userDo = userDao.getById(Long.valueOf(userId));
			Integer status = userDo.getStatus();
			
			Map<String,Object> jpMap = new HashMap<String,Object>();
			jpMap.put("status",4);
			List<UserDo> userList = userDao.getAllUser(jpMap);
			Random rand = new Random();
			int randInt = rand.nextInt(20); //生成0-minCount以内的随机数
			BigDecimal betSuccessAmount = endPrice.divide(new BigDecimal(100), 2, RoundingMode.HALF_UP).
					multiply(new BigDecimal(60));
			//真实用户 加竞争
			if(lastPrice.compareTo(endPrice) < 0 ){
				//if(status == 4  && min > 5  && lastPrice.compareTo(betSuccessAmount) > 0){  //自己人竞标成功
				//if(status == 4   && lastPrice.compareTo(betSuccessAmount) > 0){  //自己人竞标成功
				//	jpSuccess(jpDo);
				//}else{ //加自己人竞标

					for (int i = 0; i < userList.size(); i++) {
						UserDo uDo = userList.get(i);
						if(randInt == i && userId != uDo.getId() ){
							userJingpai(jpDo, uDo.getId());
							break;
						}else if( randInt == i && userId == uDo.getId()){
							 uDo = userList.get(i + 1);
							 userJingpai(jpDo, uDo.getId());
							 break;
						}
					}
				
				//}
			}else{
				jpSuccess(jpDo);
			}
		}
		
	}

	private void jpSuccess(JingpaiDo jpDo) {
		// TODO Auto-generated method stub
		jpDo.setStatus(2);
		jingpaiDao.updateJingpaiById(jpDo);
		
		Map jingpai = new HashMap();
		jingpai.put("userId", jpDo.getUserId());
		jingpai.put("price",jpDo.getLastPrice());
		jingpai.put("goodsId", jpDo.getGoodsId());
		jingpai.put("createTime", new Date());
		jingpaiDao.addJingpaiSuccess(jingpai);
	}

}
